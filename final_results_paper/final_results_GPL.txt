******************************GPL******************************
==========random_strategy==========
Loading models/GPL.xml feature model...
Initial state: []
Running 30 executions of algorithm "Random strategy" with None as stopping condition...
  |run: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 
Search finished.
Valid solutions: 30/30 (100.0%)
One of the best solution found from 30 executions:
 |Step 0: None -> []
 |Step 1: Select feature 'GPL' -> ['GPL']
 |Step 2: Select feature 'Search' -> ['GPL', 'Search']
 |Step 3: Select feature 'BFS' -> ['GPL', 'Search', 'BFS']
 |Step 4: Select feature 'Weight' -> ['GPL', 'Search', 'BFS', 'Weight']
 |Step 5: Select feature 'Driver' -> ['GPL', 'Search', 'BFS', 'Weight', 'Driver']
 |Step 6: Select feature 'DFS' -> ['GPL', 'Search', 'BFS', 'Weight', 'Driver', 'DFS']
 |Step 7: Select feature 'GraphType' -> ['GPL', 'Search', 'BFS', 'Weight', 'Driver', 'DFS', 'GraphType']
 |Step 8: Select feature 'Benchmark' -> ['GPL', 'Search', 'BFS', 'Weight', 'Driver', 'DFS', 'GraphType', 'Benchmark']
 |Step 9: Select feature 'Algorithms' -> ['GPL', 'Search', 'BFS', 'Weight', 'Driver', 'DFS', 'GraphType', 'Benchmark', 'Algorithms']
 |Step 10: Select feature 'Cycle' -> ['GPL', 'Search', 'BFS', 'Weight', 'Driver', 'DFS', 'GraphType', 'Benchmark', 'Algorithms', 'Cycle']
#Features: 10
#Decisions: 10
#Best solutions (bests/sols): 1/30 (3.33%)
#Different best solutions (diffs/sols): 1/30 (3.33%)
Statistics summary:
-------------------
#Features:
 |median: 16.0
 |mean: 15.4667
 |stdev: 1.9954
#Decisions:
 |median: 16.0
 |mean: 15.4667
 |stdev: 1.9954
Execution time:
 |median: 0.0009 s
 |mean: 0.0009 s
 |stdev: 0.0002 s
Memory consumption:
 |median: 0.3609 MB
 |mean: 0.3575 MB
 |stdev: 0.2042 MB
Experiment total execution time: 0.0257 s.
Serializing results...
Files saved in "results".
Finished.
==========flat_montecarlo==========
Loading models/GPL.xml feature model...
Initial state: []
Running 30 executions of algorithm "Flat Monte Carlo" with None as stopping condition...
  |run: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 
Search finished.
Valid solutions: 30/30 (100.0%)
One of the best solution found from 30 executions:
 |Step 0: None -> []
 |Step 1: Select feature 'GPL' -> ['GPL']
 |Step 2: Select feature 'Search' -> ['GPL', 'Search']
 |Step 3: Select feature 'Driver' -> ['GPL', 'Search', 'Driver']
 |Step 4: Select feature 'GraphType' -> ['GPL', 'Search', 'Driver', 'GraphType']
 |Step 5: Select feature 'Benchmark' -> ['GPL', 'Search', 'Driver', 'GraphType', 'Benchmark']
 |Step 6: Select feature 'Algorithms' -> ['GPL', 'Search', 'Driver', 'GraphType', 'Benchmark', 'Algorithms']
 |Step 7: Select feature 'Num' -> ['GPL', 'Search', 'Driver', 'GraphType', 'Benchmark', 'Algorithms', 'Num']
#Features: 7
#Decisions: 7
#Best solutions (bests/sols): 1/30 (3.33%)
#Different best solutions (diffs/sols): 1/30 (3.33%)
Statistics summary:
-------------------
#Features:
 |median: 10.0
 |mean: 9.7333
 |stdev: 0.7849
#Decisions:
 |median: 10.0
 |mean: 9.7333
 |stdev: 0.7849
Execution time:
 |median: 0.4594 s
 |mean: 0.4539 s
 |stdev: 0.024 s
Memory consumption:
 |median: 0.8777 MB
 |mean: 0.8647 MB
 |stdev: 0.1255 MB
Experiment total execution time: 13.616 s.
Serializing results...
Files saved in "results".
Finished.
==========uct_mcts==========
Loading models/GPL.xml feature model...
Initial state: []
Running 30 executions of algorithm "UCT MCTS" with None as stopping condition...
  |run: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 
Search finished.
Valid solutions: 30/30 (100.0%)
One of the best solution found from 30 executions:
 |Step 0: None -> []
 |Step 1: Select feature 'GPL' -> ['GPL']
 |Step 2: Select feature 'GraphType' -> ['GPL', 'GraphType']
 |Step 3: Select feature 'Undirected' -> ['GPL', 'GraphType', 'Undirected']
 |Step 4: Select feature 'Driver' -> ['GPL', 'GraphType', 'Undirected', 'Driver']
 |Step 5: Select feature 'Benchmark' -> ['GPL', 'GraphType', 'Undirected', 'Driver', 'Benchmark']
 |Step 6: Select feature 'Weight' -> ['GPL', 'GraphType', 'Undirected', 'Driver', 'Benchmark', 'Weight']
 |Step 7: Select feature 'Search' -> ['GPL', 'GraphType', 'Undirected', 'Driver', 'Benchmark', 'Weight', 'Search']
 |Step 8: Select feature 'Algorithms' -> ['GPL', 'GraphType', 'Undirected', 'Driver', 'Benchmark', 'Weight', 'Search', 'Algorithms']
 |Step 9: Select feature 'Prim' -> ['GPL', 'GraphType', 'Undirected', 'Driver', 'Benchmark', 'Weight', 'Search', 'Algorithms', 'Prim']
#Features: 9
#Decisions: 9
#Best solutions (bests/sols): 1/30 (3.33%)
#Different best solutions (diffs/sols): 1/30 (3.33%)
Statistics summary:
-------------------
#Features:
 |median: 12.0
 |mean: 11.9
 |stdev: 0.5477
#Decisions:
 |median: 12.0
 |mean: 11.9
 |stdev: 0.5477
Execution time:
 |median: 3.4378 s
 |mean: 3.3924 s
 |stdev: 0.2322 s
Memory consumption:
 |median: 7.2986 MB
 |mean: 7.3474 MB
 |stdev: 0.5572 MB
Experiment total execution time: 101.7706 s.
Serializing results...
Files saved in "results".
Finished.
==========greedy_mcts==========
Loading models/GPL.xml feature model...
Initial state: []
Running 30 executions of algorithm "Greedy MCTS" with None as stopping condition...
  |run: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 
Search finished.
Valid solutions: 30/30 (100.0%)
One of the best solution found from 30 executions:
 |Step 0: None -> []
 |Step 1: Select feature 'GPL' -> ['GPL']
 |Step 2: Select feature 'Driver' -> ['GPL', 'Driver']
 |Step 3: Select feature 'GraphType' -> ['GPL', 'Driver', 'GraphType']
 |Step 4: Select feature 'Undirected' -> ['GPL', 'Driver', 'GraphType', 'Undirected']
 |Step 5: Select feature 'Benchmark' -> ['GPL', 'Driver', 'GraphType', 'Undirected', 'Benchmark']
 |Step 6: Select feature 'Search' -> ['GPL', 'Driver', 'GraphType', 'Undirected', 'Benchmark', 'Search']
 |Step 7: Select feature 'Algorithms' -> ['GPL', 'Driver', 'GraphType', 'Undirected', 'Benchmark', 'Search', 'Algorithms']
 |Step 8: Select feature 'Num' -> ['GPL', 'Driver', 'GraphType', 'Undirected', 'Benchmark', 'Search', 'Algorithms', 'Num']
#Features: 8
#Decisions: 8
#Best solutions (bests/sols): 1/30 (3.33%)
#Different best solutions (diffs/sols): 1/30 (3.33%)
Statistics summary:
-------------------
#Features:
 |median: 11.0
 |mean: 10.6333
 |stdev: 0.9994
#Decisions:
 |median: 11.0
 |mean: 10.6333
 |stdev: 0.9994
Execution time:
 |median: 3.1315 s
 |mean: 2.9762 s
 |stdev: 0.4694 s
Memory consumption:
 |median: 6.9372 MB
 |mean: 6.9582 MB
 |stdev: 0.6807 MB
Experiment total execution time: 178.5707 s.
Serializing results...
Files saved in "results".
Finished.
==========parallel_flat_montecarlo==========
Loading models/GPL.xml feature model...
Initial state: []
Running 30 executions of algorithm "Parallel Flat Monte Carlo" with None as stopping condition...
  |run: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 
Search finished.
Valid solutions: 30/30 (100.0%)
One of the best solution found from 30 executions:
 |Step 0: None -> []
 |Step 1: Select feature 'GPL' -> ['GPL']
 |Step 2: Select feature 'Driver' -> ['GPL', 'Driver']
 |Step 3: Select feature 'Benchmark' -> ['GPL', 'Driver', 'Benchmark']
 |Step 4: Select feature 'Search' -> ['GPL', 'Driver', 'Benchmark', 'Search']
 |Step 5: Select feature 'GraphType' -> ['GPL', 'Driver', 'Benchmark', 'Search', 'GraphType']
 |Step 6: Select feature 'Algorithms' -> ['GPL', 'Driver', 'Benchmark', 'Search', 'GraphType', 'Algorithms']
 |Step 7: Select feature 'Num' -> ['GPL', 'Driver', 'Benchmark', 'Search', 'GraphType', 'Algorithms', 'Num']
#Features: 7
#Decisions: 7
#Best solutions (bests/sols): 1/30 (3.33%)
#Different best solutions (diffs/sols): 1/30 (3.33%)
Statistics summary:
-------------------
#Features:
 |median: 10.0
 |mean: 9.4667
 |stdev: 1.1666
#Decisions:
 |median: 10.0
 |mean: 9.4667
 |stdev: 1.1666
Execution time:
 |median: 0.6032 s
 |mean: 0.5831 s
 |stdev: 0.0773 s
Memory consumption:
 |median: 0.8343 MB
 |mean: 0.8398 MB
 |stdev: 0.1297 MB
Experiment total execution time: 17.4933 s.
Serializing results...
Files saved in "results".
Finished.
