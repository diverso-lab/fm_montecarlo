// Selection criteria
[<<interface>>;SelectionCriteria{bg:yellow}|+score(state, rewards, visits):float; +best_child(state,children,rewards,visits);]
[SelectionCriteria]^-.-[MaxChild{bg:yellow}]
[SelectionCriteria]^-.-[RobustChild{bg:yellow}]
[SelectionCriteria]^-.-[MaxRobustChild{bg:yellow}]
[SelectionCriteria]^-.-[SecureChild{bg:yellow}]

[_MonteCarlo_{bg:dark}]++->[SelectionCriteria]


// Monte Carlo algorithms
[<<abstract>>;_MonteCarlo_|+run():State;_+do_rollout(state)_;_+choose(State):State_;_+score(state):float_]
[MonteCarloBasic|+simulate(state):float]
[<<abstract>>_MonteCarloTreeSearch_{bg:dark}|_+best_child(state):State_; +select(state):State&#42;; +expand(state); +simulate(state):float; +backpropagate(state&#42;,reward)]

[_MonteCarlo_]^-[MonteCarloBasic]
[_MonteCarlo_]^-[_MonteCarloTreeSearch_]

[_MonteCarloTreeSearch_]^-[UCTAlgorithm]
[_MonteCarloTreeSearch_]^-[GreedyMCTS]
[_MonteCarloTreeSearch_]^-[HeuristicMCTS]
[_MonteCarloTreeSearch_]^-[MC-RAVE]
[UCTAlgorithm]^-[RandomExpansion]

// Stopping condition
[<<interface>>;StoppingCondition{bg:orange}|+initialize(); +update(); +reached():bool]
[IterationsSC{bg:orange}|+iterations:int]
[AnytimeSC{bg:orange}|+seconds:int]

[StoppingCondition]^-.-[IterationsSC]
[StoppingCondition]^-.-[AnytimeSC]

[_MonteCarlo_]<>->[StoppingCondition]
