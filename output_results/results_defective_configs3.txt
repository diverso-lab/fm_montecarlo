(env) josemi@josemi-linux-us:~/Workspaces/famapy-ws/fm_montecarlo$ python main_localizing_configurations.py
Problem 1 (simulated): Finding defective configurations.
-----------------------------------------------
Setting up the problem...
Loading feature model: model_simple_paper_excerpt_simpleCTCs ...
Feature model loaded with 13 features, 6 constraints, 6 relations.
Transforming to CNF model...
Creating set of actions...
27 actions.
Creating initial state (configuration)...
Initial state: []
Problem setted up.
Configuring MonteCarlo algorithm...
UCTAlgorithm with 10 iterations, and 0.5 exploration weight.
Running algorithm...
Input state 0: [] -> valid=False, R=-1
Execution time for Step 0: 0.005247592926025391 seconds.
----------MCTS stats----------
MonteCarloTreeSearch values:
//MC values for state: ['AAFMFramework'] -> -6/10 = -0.6
\#Decisions: 1
Total nodes in the tree search: 11
------------------------------
Input state 1: ['AAFMFramework'] -> valid=False, R=-1
Execution time for Step 1: 0.005722522735595703 seconds.
----------MCTS stats----------
MonteCarloTreeSearch values:
//MC values for state: ['AAFMFramework', 'Solvers'] -> -11/17 = -0.6470588235294118
//MC values for state: ['AAFMFramework', 'System'] -> -3/3 = -1.0
\#Decisions: 2
Total nodes in the tree search: 22
------------------------------
Input state 2: ['AAFMFramework', 'Solvers'] -> valid=False, R=-1
Execution time for Step 2: 0.007761716842651367 seconds.
----------MCTS stats----------
MonteCarloTreeSearch values:
//MC values for state: ['AAFMFramework', 'Solvers', 'System'] -> -21/27 = -0.7777777777777778
\#Decisions: 1
Total nodes in the tree search: 33
------------------------------
Input state 3: ['AAFMFramework', 'Solvers', 'System'] -> valid=False, R=-1
Execution time for Step 3: 0.006129026412963867 seconds.
----------MCTS stats----------
MonteCarloTreeSearch values:
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux'] -> -22/32 = -0.6875
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Win'] -> -5/5 = -1.0
\#Decisions: 2
Total nodes in the tree search: 44
------------------------------
Input state 4: ['AAFMFramework', 'Solvers', 'System', 'Linux'] -> valid=False, R=-1
Execution time for Step 4: 0.006366729736328125 seconds.
----------MCTS stats----------
MonteCarloTreeSearch values:
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages'] -> -20/30 = -0.6666666666666666
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'MiniSAT'] -> -4/4 = -1.0
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'PicoSAT'] -> -4/4 = -1.0
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Glucose'] -> -4/4 = -1.0
\#Decisions: 4
Total nodes in the tree search: 55
------------------------------
Input state 5: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages'] -> valid=False, R=-1
Execution time for Step 5: 0.005150794982910156 seconds.
----------MCTS stats----------
MonteCarloTreeSearch values:
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'MiniSAT'] -> -2/2 = -1.0
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'PicoSAT'] -> -2/2 = -1.0
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'Glucose'] -> -2/2 = -1.0
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'python-sat'] -> -2/2 = -1.0
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pycosat'] -> -2/2 = -1.0
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pyPicosat'] -> -15/31 = -0.4838709677419355
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pyglucose'] -> -2/2 = -1.0
\#Decisions: 7
Total nodes in the tree search: 66
------------------------------
Input state 6: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pyPicosat'] -> valid=False, R=-1
Execution time for Step 6: 0.004334926605224609 seconds.
----------MCTS stats----------
MonteCarloTreeSearch values:
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pyPicosat', 'MiniSAT'] -> -3/5 = -0.6
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pyPicosat', 'PicoSAT'] -> -4/8 = -0.5
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pyPicosat', 'Glucose'] -> -2/2 = -1.0
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pyPicosat', 'python-sat'] -> -5/13 = -0.38461538461538464
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pyPicosat', 'pycosat'] -> -5/11 = -0.45454545454545453
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pyPicosat', 'pyglucose'] -> -2/2 = -1.0
\#Decisions: 6
Total nodes in the tree search: 77
------------------------------
Input state 7: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pyPicosat', 'python-sat'] -> valid=False, R=-1
Execution time for Step 7: 0.004018306732177734 seconds.
----------MCTS stats----------
MonteCarloTreeSearch values:
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pyPicosat', 'python-sat', 'MiniSAT'] -> -9/15 = -0.6
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pyPicosat', 'python-sat', 'PicoSAT'] -> -2/2 = -1.0
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pyPicosat', 'python-sat', 'Glucose'] -> -2/2 = -1.0
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pyPicosat', 'python-sat', 'pycosat'] -> -2/2 = -1.0
//MC values for state: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pyPicosat', 'python-sat', 'pyglucose'] -> -2/2 = -1.0
\#Decisions: 5
Total nodes in the tree search: 85
------------------------------
Final state 8: ['AAFMFramework', 'Solvers', 'System', 'Linux', 'Packages', 'pyPicosat', 'python-sat', 'MiniSAT'] -> valid=True, R=1
Finished!
         193372 function calls (191855 primitive calls) in 0.046 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.046    0.046 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 ElementTree.py:1192(parse)
        1    0.000    0.000    0.000    0.000 ElementTree.py:551(__init__)
        1    0.000    0.000    0.000    0.000 ElementTree.py:557(getroot)
        1    0.000    0.000    0.000    0.000 ElementTree.py:571(parse)
      570    0.000    0.000    0.001    0.000 _utils.py:47(check)
        1    0.000    0.000    0.000    0.000 aafms_helper.py:11(__init__)
        1    0.000    0.000    0.000    0.000 aafms_helper.py:15(<dictcomp>)
      570    0.001    0.000    0.011    0.000 aafms_helper.py:22(is_valid_configuration)
      570    0.002    0.000    0.008    0.000 aafms_helper.py:23(<listcomp>)
        1    0.000    0.000    0.000    0.000 actions_list.py:55(get_nof_actions)
       15    0.000    0.000    0.000    0.000 actions_list.py:56(<genexpr>)
      570    0.000    0.000    0.000    0.000 configuration.py:6(__init__)
       85    0.000    0.000    0.012    0.000 configuration_state.py:15(find_successors)
      275    0.000    0.000    0.009    0.000 configuration_state.py:26(find_random_successor)
      704    0.005    0.000    0.020    0.000 configuration_state.py:36(get_actions)
     3151    0.001    0.000    0.003    0.000 configuration_state.py:48(<listcomp>)
     3120    0.001    0.000    0.003    0.000 configuration_state.py:52(<listcomp>)
    23232    0.002    0.000    0.002    0.000 configuration_state.py:59(__hash__)
      635    0.000    0.000    0.000    0.000 configuration_state.py:64(__eq__)
       38    0.000    0.000    0.000    0.000 configuration_state.py:67(__str__)
      570    0.000    0.000    0.000    0.000 configuration_state.py:8(__init__)
      569    0.000    0.000    0.000    0.000 copy.py:66(copy)
      569    0.000    0.000    0.012    0.000 defective_simulated_configuration_state.py:13(configuration_transition_function)
      363    0.000    0.000    0.016    0.000 defective_simulated_configuration_state.py:16(is_terminal)
      106    0.000    0.000    0.001    0.000 defective_simulated_configuration_state.py:19(reward)
       27    0.000    0.000    0.000    0.000 defective_simulated_configuration_state.py:30(count_errors)
       24    0.000    0.000    0.000    0.000 defective_simulated_configuration_state.py:35(<listcomp>)
        3    0.000    0.000    0.000    0.000 defective_simulated_configuration_state.py:37(<listcomp>)
      570    0.001    0.000    0.012    0.000 defective_simulated_configuration_state.py:8(__init__)
        3    0.000    0.000    0.000    0.000 feature_model.py:108(get_features)
        2    0.000    0.000    0.000    0.000 feature_model.py:121(get_constraints)
     7476    0.001    0.000    0.001    0.000 feature_model.py:124(get_feature_by_name)
       14    0.000    0.000    0.000    0.000 feature_model.py:18(is_mandatory)
       11    0.000    0.000    0.000    0.000 feature_model.py:21(is_optional)
       11    0.000    0.000    0.000    0.000 feature_model.py:24(is_or)
        8    0.000    0.000    0.000    0.000 feature_model.py:27(is_alternative)
       13    0.000    0.000    0.000    0.000 feature_model.py:41(__init__)
        6    0.000    0.000    0.000    0.000 feature_model.py:47(add_relation)
       57    0.000    0.000    0.000    0.000 feature_model.py:50(get_relations)
      196    0.000    0.000    0.000    0.000 feature_model.py:56(__str__)
    47846    0.006    0.000    0.008    0.000 feature_model.py:59(__hash__)
       13    0.000    0.000    0.000    0.000 feature_model.py:62(__eq__)
        6    0.000    0.000    0.000    0.000 feature_model.py:67(__init__)
        1    0.000    0.000    0.000    0.000 feature_model.py:82(__init__)
        6    0.000    0.000    0.000    0.000 feature_model.py:9(__init__)
        1    0.000    0.000    0.000    0.000 feature_model.py:91(<dictcomp>)
        2    0.000    0.000    0.000    0.000 feature_model.py:93(get_relations)
        1    0.000    0.000    0.000    0.000 featureide_parser.py:13(__init__)
        1    0.000    0.000    0.000    0.000 featureide_parser.py:16(transform)
        1    0.000    0.000    0.000    0.000 featureide_parser.py:19(_read_feature_model)
      4/1    0.000    0.000    0.000    0.000 featureide_parser.py:35(_read_features)
        1    0.000    0.000    0.000    0.000 featureide_parser.py:81(_read_constraints)
      569    0.000    0.000    0.000    0.000 fm_configuration.py:10(add_element)
     1093    0.001    0.000    0.006    0.000 fm_configuration.py:13(get_selected_elements)
     1093    0.003    0.000    0.006    0.000 fm_configuration.py:14(<setcomp>)
    11737    0.003    0.000    0.007    0.000 fm_configuration.py:16(contains)
      569    0.000    0.000    0.001    0.000 fm_configuration.py:19(clone)
      635    0.000    0.000    0.000    0.000 fm_configuration.py:22(__eq__)
       38    0.000    0.000    0.000    0.000 fm_configuration.py:25(__str__)
       38    0.000    0.000    0.000    0.000 fm_configuration.py:26(<listcomp>)
      175    0.000    0.000    0.001    0.000 fm_configuration.py:28(__hash__)
      570    0.000    0.000    0.000    0.000 fm_configuration.py:7(__init__)
        1    0.000    0.000    0.000    0.000 fm_to_pysat.py:17(__init__)
       13    0.000    0.000    0.000    0.000 fm_to_pysat.py:23(add_feature)
        1    0.000    0.000    0.000    0.000 fm_to_pysat.py:29(add_root)
        6    0.000    0.000    0.000    0.000 fm_to_pysat.py:32(add_relation)
        6    0.000    0.000    0.000    0.000 fm_to_pysat.py:90(add_constraint)
        1    0.000    0.000    0.000    0.000 fm_to_pysat.py:99(transform)
        1    0.000    0.000    0.000    0.000 formula.py:409(__init__)
       25    0.000    0.000    0.000    0.000 formula.py:818(append)
       25    0.000    0.000    0.000    0.000 formula.py:836(<listcomp>)
       26    0.000    0.000    0.000    0.000 formula.py:862(__iter__)
        9    0.000    0.000    0.000    0.000 iterations_stopping_condition.py:13(initialize)
       88    0.000    0.000    0.000    0.000 iterations_stopping_condition.py:17(update)
       96    0.000    0.000    0.000    0.000 iterations_stopping_condition.py:21(reached)
        1    0.000    0.000    0.000    0.000 iterations_stopping_condition.py:6(__init__)
        1    0.000    0.000    0.046    0.046 main_localizing_configurations.py:30(main)
        1    0.000    0.000    0.000    0.000 main_localizing_configurations.py:53(<dictcomp>)
        8    0.000    0.000    0.000    0.000 max_child.py:15(best_child)
       28    0.000    0.000    0.000    0.000 max_child.py:16(<lambda>)
       56    0.000    0.000    0.000    0.000 max_child.py:9(score)
        1    0.000    0.000    0.000    0.000 montecarlo.py:12(__init__)
        8    0.000    0.000    0.045    0.006 montecarlo.py:18(run)
        1    0.000    0.000    0.000    0.000 montecarlo_algorithms.py:20(uct_iterations_maxchild)
        1    0.000    0.000    0.000    0.000 montecarlo_treesearch.py:17(__init__)
       88    0.000    0.000    0.045    0.001 montecarlo_treesearch.py:23(do_rollout)
        8    0.000    0.000    0.000    0.000 montecarlo_treesearch.py:31(choose)
       28    0.000    0.000    0.000    0.000 montecarlo_treesearch.py:36(score)
       88    0.002    0.000    0.006    0.000 montecarlo_treesearch.py:39(select)
       88    0.000    0.000    0.012    0.000 montecarlo_treesearch.py:63(expand)
       88    0.000    0.000    0.025    0.000 montecarlo_treesearch.py:71(simulate)
       88    0.000    0.000    0.001    0.000 montecarlo_treesearch.py:81(backpropagate)
        8    0.000    0.000    0.000    0.000 montecarlo_treesearch.py:90(print_MC_values)
        1    0.000    0.000    0.000    0.000 problem_data.py:4(__init__)
        1    0.000    0.000    0.000    0.000 pysat_model.py:12(__init__)
      549    0.000    0.000    0.000    0.000 random.py:250(_randbelow_with_getrandbits)
      549    0.000    0.000    0.001    0.000 random.py:285(choice)
        2    0.000    0.000    0.000    0.000 select_alternative_feature.py:10(<genexpr>)
        5    0.000    0.000    0.000    0.000 select_alternative_feature.py:16(execute)
        2    0.000    0.000    0.000    0.000 select_alternative_feature.py:21(executions)
      345    0.001    0.000    0.002    0.000 select_alternative_feature.py:28(is_applicable)
      734    0.000    0.000    0.000    0.000 select_alternative_feature.py:29(<genexpr>)
        1    0.000    0.000    0.000    0.000 select_alternative_feature.py:8(__init__)
      569    0.000    0.000    0.002    0.000 select_feature.py:18(get_config_with_feature)
        6    0.000    0.000    0.000    0.000 select_feature.py:8(__init__)
        1    0.000    0.000    0.000    0.000 select_mandatory_feature.py:10(<listcomp>)
        8    0.000    0.000    0.000    0.000 select_mandatory_feature.py:16(execute)
        8    0.000    0.000    0.000    0.000 select_mandatory_feature.py:17(<listcomp>)
        5    0.000    0.000    0.000    0.000 select_mandatory_feature.py:22(executions)
      349    0.000    0.000    0.001    0.000 select_mandatory_feature.py:30(is_applicable)
     1039    0.000    0.000    0.001    0.000 select_mandatory_feature.py:31(<genexpr>)
        1    0.000    0.000    0.000    0.000 select_mandatory_feature.py:8(__init__)
        1    0.000    0.000    0.000    0.000 select_optional_feature.py:10(<listcomp>)
       11    0.000    0.000    0.000    0.000 select_optional_feature.py:16(execute)
       11    0.000    0.000    0.000    0.000 select_optional_feature.py:17(<listcomp>)
       12    0.000    0.000    0.000    0.000 select_optional_feature.py:22(executions)
      336    0.000    0.000    0.001    0.000 select_optional_feature.py:30(is_applicable)
      672    0.000    0.000    0.000    0.000 select_optional_feature.py:31(<genexpr>)
        1    0.000    0.000    0.000    0.000 select_optional_feature.py:8(__init__)
        4    0.000    0.000    0.000    0.000 select_or_feature.py:10(<genexpr>)
      250    0.000    0.000    0.002    0.000 select_or_feature.py:16(execute)
      250    0.000    0.000    0.001    0.000 select_or_feature.py:17(<listcomp>)
      134    0.000    0.000    0.001    0.000 select_or_feature.py:22(executions)
      651    0.000    0.000    0.002    0.000 select_or_feature.py:30(is_applicable)
     2157    0.000    0.000    0.001    0.000 select_or_feature.py:31(<genexpr>)
        2    0.000    0.000    0.000    0.000 select_or_feature.py:8(__init__)
        1    0.000    0.000    0.000    0.000 select_root_feature.py:14(execute)
        1    0.000    0.000    0.000    0.000 select_root_feature.py:17(executions)
        1    0.000    0.000    0.000    0.000 select_root_feature.py:7(__init__)
        1    0.000    0.000    0.000    0.000 solvers.py:1321(__init__)
        1    0.000    0.000    0.000    0.000 solvers.py:1348(new)
      570    0.001    0.000    0.003    0.000 solvers.py:1389(solve)
       25    0.000    0.000    0.000    0.000 solvers.py:1577(add_clause)
        1    0.000    0.000    0.000    0.000 solvers.py:1598(append_formula)
      570    0.000    0.000    0.000    0.000 threading.py:1306(current_thread)
      570    0.000    0.000    0.000    0.000 threading.py:1395(main_thread)
     6273    0.001    0.000    0.001    0.000 tree_actions_list.py:12(get_actions)
        1    0.000    0.000    0.000    0.000 tree_actions_list.py:15(_build_actions)
       18    0.000    0.000    0.000    0.000 tree_actions_list.py:24(<genexpr>)
       17    0.000    0.000    0.000    0.000 tree_actions_list.py:26(<genexpr>)
       19    0.000    0.000    0.000    0.000 tree_actions_list.py:28(<genexpr>)
       19    0.000    0.000    0.000    0.000 tree_actions_list.py:30(<genexpr>)
        1    0.000    0.000    0.000    0.000 tree_actions_list.py:9(__init__)
        1    0.000    0.000    0.000    0.000 uct_mcts.py:15(__init__)
      263    0.000    0.000    0.002    0.000 uct_mcts.py:19(best_child)
     1012    0.001    0.000    0.001    0.000 uct_mcts.py:23(uct)
      570    0.000    0.000    0.000    0.000 {built-in method _thread.get_ident}
       55    0.000    0.000    0.000    0.000 {built-in method builtins.abs}
      345    0.000    0.000    0.001    0.000 {built-in method builtins.all}
     1388    0.001    0.000    0.003    0.000 {built-in method builtins.any}
        1    0.000    0.000    0.046    0.046 {built-in method builtins.exec}
        2    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}
48196/46682    0.003    0.000    0.003    0.000 {built-in method builtins.hash}
      647    0.000    0.000    0.000    0.000 {built-in method builtins.len}
      296    0.000    0.000    0.002    0.000 {built-in method builtins.max}
        3    0.000    0.000    0.000    0.000 {built-in method builtins.next}
      100    0.000    0.000    0.000    0.000 {built-in method builtins.print}
        1    0.000    0.000    0.000    0.000 {built-in method builtins.sum}
        1    0.000    0.000    0.000    0.000 {built-in method io.open}
      263    0.000    0.000    0.000    0.000 {built-in method math.log}
     1012    0.000    0.000    0.000    0.000 {built-in method math.sqrt}
       25    0.000    0.000    0.000    0.000 {built-in method pysolvers.glucose3_add_cl}
        1    0.000    0.000    0.000    0.000 {built-in method pysolvers.glucose3_new}
      570    0.001    0.000    0.001    0.000 {built-in method pysolvers.glucose3_solve}
       16    0.000    0.000    0.000    0.000 {built-in method time.time}
        1    0.000    0.000    0.000    0.000 {method '_parse_whole' of 'xml.etree.ElementTree.XMLParser' objects}
     1015    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
      549    0.000    0.000    0.000    0.000 {method 'bit_length' of 'int' objects}
        1    0.000    0.000    0.000    0.000 {method 'close' of '_io.BufferedReader' objects}
      569    0.000    0.000    0.000    0.000 {method 'copy' of 'dict' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
     6279    0.000    0.000    0.000    0.000 {method 'extend' of 'list' objects}
      624    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}
     1058    0.000    0.000    0.000    0.000 {method 'getrandbits' of '_random.Random' objects}
      746    0.000    0.000    0.000    0.000 {method 'items' of 'dict' objects}
     1491    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}
       84    0.000    0.000    0.000    0.000 {method 'pop' of 'set' objects}
        1    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}


Total Time: 0.04870176315307617 seconds
